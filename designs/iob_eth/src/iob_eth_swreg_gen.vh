//This file was generated by script mkregs.py



//write registers
`IOB_WIRE(ETH_SEND_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[0+:1]) & (address == 0)), ETH_SEND_en)
`IOB_WIRE(ETH_SEND_wdata, 8)
`IOB_WIRE2WIRE(wdata[0+:8], ETH_SEND_wdata)

`IOB_WIRE(ETH_RCVACK_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[1+:1]) & (address == 0)), ETH_RCVACK_en)
`IOB_WIRE(ETH_RCVACK_wdata, 8)
`IOB_WIRE2WIRE(wdata[8+:8], ETH_RCVACK_wdata)

`IOB_WIRE(ETH_SOFTRST_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[2+:1]) & (address == 0)), ETH_SOFTRST_en)
`IOB_WIRE(ETH_SOFTRST_wdata, 8)
`IOB_WIRE2WIRE(wdata[16+:8], ETH_SOFTRST_wdata)

`IOB_WIRE(ETH_DUMMY_W_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[0+:4]) & (address == 1)), ETH_DUMMY_W_en)
`IOB_WIRE(ETH_DUMMY_W_wdata, 32)
`IOB_WIRE2WIRE(wdata[0+:32], ETH_DUMMY_W_wdata)

`IOB_WIRE(ETH_TX_NBYTES_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[0+:2]) & (address == 2)), ETH_TX_NBYTES_en)
`IOB_WIRE(ETH_TX_NBYTES_wdata, 16)
`IOB_WIRE2WIRE(wdata[0+:16], ETH_TX_NBYTES_wdata)



//read register logic
`IOB_VAR(rdata_int, DATA_W)
`IOB_WIRE(address_reg, ADDR_W)
iob_reg #(ADDR_W, 0) addr_reg (clk, rst, 1'b0, valid, address, address_reg);
//Select read data from registers or memory
`IOB_VAR(mem_rdata_int, DATA_W)
`IOB_WIRE(mem_read_sel_reg, 1)

`IOB_WIRE(mem_switch, 1)
iob_reg #(1, 0) mem_read_sel_ (clk, rst, 1'b0, 1'b1, (valid & (wstrb == 0) & |mem_switch), mem_read_sel_reg);
`IOB_VAR2WIRE((mem_read_sel_reg) ? mem_rdata_int : rdata_int, rdata)

`IOB_WIRE(ETH_STATUS_rdata, 32)
`IOB_WIRE(ETH_DUMMY_R_rdata, 32)
`IOB_WIRE(ETH_CRC_rdata, 32)
`IOB_WIRE(ETH_RCV_SIZE_rdata, 16)

always @* begin
   case(address_reg)
        0: rdata_int = {ETH_STATUS_rdata};
        1: rdata_int = {ETH_DUMMY_R_rdata};
        2: rdata_int = {ETH_CRC_rdata};
        3: rdata_int = {ETH_RCV_SIZE_rdata};
     default: rdata_int = 1'b0;
   endcase
end
iob_reg #(1, 0) valid_reg (clk, rst, 1'b0, 1'b1, valid, ready);

//mem wires
localparam ETH_DATA_WR_ADDR_OFFSET = 3;
`IOB_WIRE(ETH_DATA_WR_addr, 9)
`IOB_WIRE(ETH_DATA_WR_addr_int, DATA_W+1)
`IOB_WIRE(ETH_DATA_WR_wdata, DATA_W)
`IOB_WIRE(ETH_DATA_WR_wstrb, (DATA_W/8))

localparam ETH_DATA_RD_ADDR_OFFSET = 4;
`IOB_WIRE(ETH_DATA_RD_addr, 9)
`IOB_WIRE(ETH_DATA_RD_addr_int, DATA_W+1)
`IOB_WIRE(ETH_DATA_RD_rdata, DATA_W)
`IOB_WIRE(ETH_DATA_RD_ren, 1)



//mem write logic
`IOB_WIRE2WIRE((address - ETH_DATA_WR_ADDR_OFFSET), ETH_DATA_WR_addr_int)
`IOB_WIRE2WIRE(ETH_DATA_WR_addr_int[9-1:0], ETH_DATA_WR_addr)
`IOB_WIRE2WIRE(wdata, ETH_DATA_WR_wdata)
`IOB_WIRE2WIRE((valid & ( ETH_DATA_WR_addr_int[ADDR_W-1:9] == 0 ) & (|wstrb)) ? wstrb : {(DATA_W/8){1'b0}}, ETH_DATA_WR_wstrb)

//mem read logic
`IOB_WIRE2WIRE((address - ETH_DATA_RD_ADDR_OFFSET), ETH_DATA_RD_addr_int)
`IOB_WIRE2WIRE(ETH_DATA_RD_addr_int[9-1:0], ETH_DATA_RD_addr)
`IOB_WIRE2WIRE((valid & ( ETH_DATA_RD_addr_int[ADDR_W-1:9] == 0 ) & ~(|wstrb)), ETH_DATA_RD_ren)
`IOB_WIRE(mem_switch_reg, 1)
`IOB_WIRE2WIRE( {ETH_DATA_RD_ren}, mem_switch)
iob_reg #(1, 0) mem_switch_ (clk, rst, 1'b0, 1'b1, mem_switch, mem_switch_reg);
always @* begin
	case(mem_switch_reg)
		1: mem_rdata_int = ETH_DATA_RD_rdata;
		default: mem_rdata_int = 1'b0;
	endcase
end
