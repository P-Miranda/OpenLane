//This file was generated by script mkregs.py



//write registers
`IOB_WIRE(TIMER_RESET_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[0+:1]) & (address == 0)), TIMER_RESET_en)
`IOB_WIRE(TIMER_RESET_wdata, 8)
`IOB_WIRE2WIRE(wdata[0+:8], TIMER_RESET_wdata)

`IOB_WIRE(TIMER_ENABLE_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[1+:1]) & (address == 0)), TIMER_ENABLE_en)
`IOB_WIRE(TIMER_ENABLE_wdata, 8)
`IOB_WIRE2WIRE(wdata[8+:8], TIMER_ENABLE_wdata)

`IOB_WIRE(TIMER_SAMPLE_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[2+:1]) & (address == 0)), TIMER_SAMPLE_en)
`IOB_WIRE(TIMER_SAMPLE_wdata, 8)
`IOB_WIRE2WIRE(wdata[16+:8], TIMER_SAMPLE_wdata)



//read register logic
`IOB_VAR(rdata_int, DATA_W)
`IOB_WIRE(address_reg, ADDR_W)
iob_reg #(ADDR_W, 0) addr_reg (clk, rst, 1'b0, valid, address, address_reg);
`IOB_VAR2WIRE(rdata_int, rdata)

`IOB_WIRE(TIMER_DATA_HIGH_rdata, 32)
`IOB_WIRE(TIMER_DATA_LOW_rdata, 32)

always @* begin
   case(address_reg)
        0: rdata_int = {TIMER_DATA_HIGH_rdata};
        1: rdata_int = {TIMER_DATA_LOW_rdata};
     default: rdata_int = 1'b0;
   endcase
end
iob_reg #(1, 0) valid_reg (clk, rst, 1'b0, 1'b1, valid, ready);
